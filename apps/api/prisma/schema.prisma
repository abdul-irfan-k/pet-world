generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(cuid())
  name                   String
  userName               String    @unique
  email                  String    @unique
  phone                  String?
  dateOfBirth            DateTime?
  address                Json?
  gender                 String?
  password               String
  isDisabled             Boolean   @default(false)
  isVerified             Boolean   @default(false)
  lastLogin              DateTime?
  stripeCustomerId       String?   @unique
  stripeConnectedAccount String?   @unique
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  isDeleted              Boolean   @default(false)

  pets             Pet[]
  locations        Location[]
  // petAdopter       Pet_Adopter?
  sentPayments     Payment[]         @relation("SentPayments")
  receivedPayments Payment[]         @relation("ReceivedPayments")
  campaigns        Pet_Campaigns[]
  petCareRequest   PetCareRequest[]
  otp              Otp[]
  FavoritePet      FavoritePet[]
  PetCare          PetCare[]
  PetCareProposal  PetCareProposal[]
  Pet_Adopter      Pet_Adopter?
}

model Pet {
  id             String   @id @default(cuid())
  name           String
  petBiometricId String?
  species        String
  images         String[]
  videos         String[]
  age            Int
  breed          String
  gender         String
  profile        Json?
  ownerId        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  isDeleted      Boolean  @default(false)

  owner            User             @relation(fields: [ownerId], references: [id])
  adoptionRequests PetCareRequest[]
  petCare          PetCare[]
  FavoritePet      FavoritePet[]
}

model FavoritePet {
  id        String   @id @default(cuid())
  userId    String
  petId     String
  createdAt DateTime @default(now())
  isDeleted Boolean  @default(false)

  user User @relation(fields: [userId], references: [id])
  pet  Pet  @relation(fields: [petId], references: [id])

  @@unique([userId, petId])
}

model Location {
  id        String   @id @default(cuid())
  name      String
  street    String
  apt       String?
  country   String
  state     String
  city      String
  postcode  String
  latitude  Float
  longitude Float
  isDefault Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  isDeleted Boolean  @default(false)

  user           User             @relation(fields: [userId], references: [id])
  petCareRequest PetCareRequest[]
}

model Pet_Adopter {
  id               String   @id @default(cuid())
  userId           String   @unique
  adharNumber      String?  @unique
  documents        Json?
  yearOfExperience Int?
  certifications   String[] @default([])
  overview         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
  isDeleted        Boolean  @default(false)

  user      User              @relation(fields: [userId], references: [id])
  proposals PetCareProposal[]
  petCare   PetCare[] // Added relation
}

model Pet_Campaigns {
  id          String   @id @default(cuid())
  ownerId     String
  title       String
  description String
  imageUrls   String[]
  videoUrls   String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  isDeleted   Boolean  @default(false)

  owner          User              @relation(fields: [ownerId], references: [id])
  accountDetails Account_Details[]
}

model Account_Details {
  id                String   @id @default(cuid())
  campaignId        String
  accountHolderName String
  bankName          String
  accountNumber     String
  ifscCode          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  isDeleted         Boolean  @default(false)

  campaign Pet_Campaigns @relation(fields: [campaignId], references: [id])

  @@unique([campaignId, accountNumber])
}

enum PaymentStatus {
  pending
  completed
  rejected
}

model Payment {
  id                String  @id @default(cuid())
  userId            String
  receiverId        String
  adoptionId        String? @unique
  transactionNumber String  @unique

  isDonation  Boolean @default(false)
  platformFee Float
  totalPaid   Float

  currency              String
  stripePaymentIntentId String?
  stripeChargeId        String?

  paymentStatus PaymentStatus @default(pending)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  isDeleted     Boolean       @default(false)

  user     User     @relation("SentPayments", fields: [userId], references: [id])
  receiver User     @relation("ReceivedPayments", fields: [receiverId], references: [id])
  petCare  PetCare? @relation(fields: [adoptionId], references: [id])
}

enum OtpAction {
  RESET_PASSWORD
  VERIFY_EMAIL
  TWO_FACTOR_AUTH
  ACCOUNT_ACTIVATION
}

model Otp {
  id        String    @id @default(cuid())
  userId    String
  code      String
  action    OtpAction
  expiresAt DateTime  @db.Timestamp
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)

  user User @relation(fields: [userId], references: [id])
}

model PetCare {
  id               String        @id @default(cuid())
  petId            String
  ownerId          String
  petCareRequestId String
  startedAt        DateTime
  endedAt          DateTime
  isCompleted      Boolean       @default(false)
  paymentStatus    PaymentStatus @default(pending)
  review           String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now())
  isDeleted        Boolean       @default(false)
  adopterId        String

  pet            Pet            @relation(fields: [petId], references: [id])
  owner          User           @relation(fields: [ownerId], references: [id])
  petCareRequest PetCareRequest @relation(fields: [petCareRequestId], references: [id])
  Payment        Payment?
  Pet_Adopter    Pet_Adopter?   @relation(fields: [adopterId], references: [id])
}

model PetCareRequest {
  id          String   @id @default(cuid())
  ownerId     String
  petId       String
  locationId  String
  title       String
  amount      String
  description String
  status      String   @default("pending")
  startDate   DateTime
  endDate     DateTime
  questions   Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  isDeleted   Boolean  @default(false)

  user      User              @relation(fields: [ownerId], references: [id])
  pet       Pet               @relation(fields: [petId], references: [id])
  location  Location          @relation(fields: [locationId], references: [id])
  proposals PetCareProposal[]
  petCare   PetCare[] // Added relation
}

model PetCareProposal {
  id               String   @id @default(cuid())
  petCareRequestId String
  adopterId        String
  message          String
  proposedFee      Float
  status           String   @default("pending")
  answers          Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
  isDeleted        Boolean  @default(false)

  petCareRequest PetCareRequest @relation(fields: [petCareRequestId], references: [id])
  adopter        User           @relation(fields: [adopterId], references: [id])
  Pet_Adopter    Pet_Adopter?   @relation(fields: [pet_AdopterId], references: [id])
  pet_AdopterId  String?
}

model Admin {
  id        String  @id @default(cuid())
  email     String  @unique
  password  String
  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
